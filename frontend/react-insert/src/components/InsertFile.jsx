import React, { useState } from 'react';

/**
 * InsertFile Component
 *
 * This component provides a UI for uploading a file with additional metadata.
 * - Displays a button "Upload New File" which, when clicked, reveals the file upload form.
 * - The form allows the user to attach a file (via file input), enter a description, and specify the owner.
 * - It captures the file's name, size, and type.
 * - Based on file size:
 *    - If file size < 1 MB: the file is uploaded to the DynamoDB endpoint.
 *    - If file size > 1 MB and ≤ 2 MB: the file is uploaded to the MongoDB endpoint.
 *    - If file size > 2 MB: an error message is shown, and upload is prevented.
 * - The date inserted and date modified are generated by the backend.
 *
 * @component
 */
const InsertFile = () => {
  // State to control whether the upload form is shown.
  const [showForm, setShowForm] = useState(false);
  // State to store the selected file.
  const [selectedFile, setSelectedFile] = useState(null);
  // State to hold the description entered by the user.
  const [description, setDescription] = useState('');
  // State to hold the owner name entered by the user.
  const [owner, setOwner] = useState('');
  // State for error messages.
  const [errorMessage, setErrorMessage] = useState('');

  /**
   * Handles the click event for the "Upload New File" button.
   * Sets the flag to show the upload form.
   */
  const handleShowForm = () => {
    setShowForm(true);
  };

  /**
   * Handles file selection.
   *
   * @param {React.ChangeEvent<HTMLInputElement>} e - The file input change event.
   */
  const handleFileChange = (e) => {
    setErrorMessage(''); // Clear any previous error messages.
    if (e.target.files && e.target.files.length > 0) {
      // Capture the first file selected.
      const file = e.target.files[0];
      setSelectedFile(file);
    }
  };

  /**
   * Handles the form submission.
   * Validates file size and determines which backend endpoint to use.
   *
   * @param {React.FormEvent<HTMLFormElement>} e - The form submission event.
   */
  const handleSubmit = async (e) => {
    e.preventDefault();

    // Validate that a file has been selected.
    if (!selectedFile) {
      setErrorMessage('Please select a file.');
      return;
    }

    // Capture file metadata.
    const fileSize = selectedFile.size; // File size in bytes.
    const fileName = selectedFile.name; // File name.
    const fileType = selectedFile.type; // MIME type (e.g., image/jpeg, application/pdf).

    // Define file size thresholds.
    const oneMB = 1048576;  // 1 MB in bytes.
    const twoMB = 2097152;  // 2 MB in bytes.

    // Validate file size.
    if (fileSize > twoMB) {
      setErrorMessage("File size can't be more than 2MB.");
      return;
    }

    // Determine the backend endpoint based on file size.
    // If file size < 1 MB, upload to DynamoDB endpoint.
    // If file size > 1 MB (and ≤ 2 MB), upload to MongoDB endpoint.
    let endpoint = '';
    if (fileSize < oneMB) {
      endpoint = 'http://localhost:8080/api/dynamo/resources';
    } else {
      endpoint = 'http://localhost:8080/api/mongo/resources';
    }

    // Create a FormData object to send the file and metadata.
    const formData = new FormData();
    formData.append('file', selectedFile); // Append the actual file.
    formData.append('fileName', fileName);   // Append the file name.
    formData.append('fileType', fileType);   // Append the file type.
    formData.append('fileSize', fileSize.toString()); // Append file size as a string.
    formData.append('fileDescription', description);   // Append the description.
    formData.append('fileOwner', owner);               // Append the owner.
    // Note: dateInserted and dateModified are generated by the backend.

    try {
      // Send the POST request to the appropriate endpoint.
      const response = await fetch(endpoint, {
        method: 'POST',
        body: formData,
      });
      console.log('Response status:', response.status);
      console.log('Response headers:', response.headers.get('content-type'));
      if (!response.ok) {
        throw new Error(`Server responded with ${response.status}`);
      }
      alert('File uploaded successfully!');
      // Reset the form after successful upload.
      setSelectedFile(null);
      setDescription('');
      setOwner('');
      setErrorMessage('');
    } catch (error) {
      console.error('Error uploading file:', error);
      setErrorMessage('Error uploading file. Please try again.');
    }
  };

  return (
    <div>
      {/* Initially show the "Upload New File" button */}
      {!showForm && (
        <button onClick={handleShowForm}>Upload New File</button>
      )}

      {/* Show the upload form when the button is clicked */}
      {showForm && (
        <form onSubmit={handleSubmit}>
          <div>
            <label htmlFor="fileInput">Select File:</label>
            <input type="file" id="fileInput" onChange={handleFileChange} required />
          </div>
          <div>
            <label htmlFor="description">Description:</label>
            <input
              type="text"
              id="description"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              placeholder="Enter file description"
              required
            />
          </div>
          <div>
            <label htmlFor="owner">Owner:</label>
            <input
              type="text"
              id="owner"
              value={owner}
              onChange={(e) => setOwner(e.target.value)}
              placeholder="Enter owner name"
              required
            />
          </div>
          {errorMessage && (
            <p style={{ color: 'red' }}>{errorMessage}</p>
          )}
          <button type="submit">Submit File</button>
        </form>
      )}
    </div>
  );
};

export default InsertFile;